diff -cr android-ws.org/frameworks/base/services/java/com/android/server/InputMethodManagerService.java android-ws/frameworks/base/services/java/com/android/server/InputMethodManagerService.java
*** android-ws.org/frameworks/base/services/java/com/android/server/InputMethodManagerService.java	2010-01-04 14:49:29.000000000 +0900
--- android-ws/frameworks/base/services/java/com/android/server/InputMethodManagerService.java	2010-01-04 14:54:34.000000000 +0900
***************
*** 1690,1693 ****
--- 1690,1733 ----
              }
          }
      }
+ //custom IME installer experiment
+     public void setInputMethodEnabledEx(String id) {
+     	synchronized (mMethodMap) {
+     		// Make sure this is a valid input method.
+     		InputMethodInfo imm = mMethodMap.get(id);
+     		if (imm == null) {
+     			if (imm == null) {
+     				throw new IllegalArgumentException("Unknown id: " + mCurMethodId);
+     			}
+     		}
+ 
+     		// Look through the currently enabled input methods.
+     		String enabledStr = Settings.Secure.getString(mContext.getContentResolver(),
+     				Settings.Secure.ENABLED_INPUT_METHODS);
+     		if (enabledStr != null) {
+ 
+     			final TextUtils.SimpleStringSplitter splitter = mStringColonSplitter;
+     			splitter.setString(enabledStr);
+     			while (splitter.hasNext()) {
+     				String curId = splitter.next();
+     				if (curId.equals(id)) return;
+     			}
+     		}
+     		// Add in the newly enabled input method.
+     		if (enabledStr == null || enabledStr.length() == 0) {
+     			enabledStr = id;
+     		} else {
+     			enabledStr = enabledStr + ':' + id;
+     		}
+     		Settings.Secure.putString(mContext.getContentResolver(),
+     				Settings.Secure.ENABLED_INPUT_METHODS, enabledStr);
+     	}
+     }
+     public void setInputMethodDefault(String id) {
+     	Settings.Secure.putString(mContext.getContentResolver(),
+     			Settings.Secure.DEFAULT_INPUT_METHOD, id);
+ 
+     }
+ 
+ //custom IME installer experiment
  }
diff -cr android-ws.org/frameworks/base/services/java/com/android/server/PackageManagerService.java android-ws/frameworks/base/services/java/com/android/server/PackageManagerService.java
*** android-ws.org/frameworks/base/services/java/com/android/server/PackageManagerService.java	2010-01-04 14:49:29.000000000 +0900
--- android-ws/frameworks/base/services/java/com/android/server/PackageManagerService.java	2010-01-04 16:52:27.000000000 +0900
***************
*** 105,110 ****
--- 105,120 ----
  import java.util.zip.ZipFile;
  import java.util.zip.ZipOutputStream;
  
+ // custom installer experiment
+ import android.content.pm.DefaultPackageInstaller;
+ import android.content.pm.IPackageInstaller;
+ import android.content.pm.PackageInstalledInfo;
+ import android.content.pm.PackageRemovedInfo;
+ import android.content.res.AssetManager;
+ import android.content.res.XmlResourceParser;
+ 
+ import dalvik.system.DexFile;
+ // custom installer experiment
  class PackageManagerService extends IPackageManager.Stub {
      private static final String TAG = "PackageManager";
      private static final boolean DEBUG_SETTINGS = false;
***************
*** 3653,3659 ****
              final Uri packageURI, final IPackageInstallObserver observer, final int flags) {
          installPackage(packageURI, observer, flags, null);
      }
!     
      /* Called when a downloaded package installation has been confirmed by the user */
      public void installPackage(
              final Uri packageURI, final IPackageInstallObserver observer, final int flags,
--- 3663,3670 ----
              final Uri packageURI, final IPackageInstallObserver observer, final int flags) {
          installPackage(packageURI, observer, flags, null);
      }
! 
! // custom installer experiment    
      /* Called when a downloaded package installation has been confirmed by the user */
      public void installPackage(
              final Uri packageURI, final IPackageInstallObserver observer, final int flags,
***************
*** 3663,3714 ****
          
          // Queue up an async operation since the package installation may take a little while.
          mHandler.post(new Runnable() {
!             public void run() {
!                 mHandler.removeCallbacks(this);
!                  // Result object to be returned
!                 PackageInstalledInfo res = new PackageInstalledInfo();
!                 res.returnCode = PackageManager.INSTALL_SUCCEEDED;
!                 res.uid = -1;
!                 res.pkg = null;
!                 res.removedInfo = new PackageRemovedInfo();
!                 // Make a temporary copy of file from given packageURI
!                 File tmpPackageFile = copyTempInstallFile(packageURI, res);
!                 if (tmpPackageFile != null) {
!                     synchronized (mInstallLock) {
!                         installPackageLI(packageURI, flags, true, installerPackageName, tmpPackageFile, res);
!                     }
!                 }
!                 if (observer != null) {
!                     try {
!                         observer.packageInstalled(res.name, res.returnCode);
!                     } catch (RemoteException e) {
!                         Log.i(TAG, "Observer no longer exists.");
!                     }
!                 }
!                 // There appears to be a subtle deadlock condition if the sendPackageBroadcast
!                 // call appears in the synchronized block above.
!                 if (res.returnCode == PackageManager.INSTALL_SUCCEEDED) {
!                     res.removedInfo.sendBroadcast(false, true);
!                     Bundle extras = new Bundle(1);
!                     extras.putInt(Intent.EXTRA_UID, res.uid);
!                     final boolean update = res.removedInfo.removedPackage != null;
!                     if (update) {
!                         extras.putBoolean(Intent.EXTRA_REPLACING, true);
                      }
!                     sendPackageBroadcast(Intent.ACTION_PACKAGE_ADDED,
                                           res.pkg.applicationInfo.packageName,
                                           extras);
!                     if (update) {
                          sendPackageBroadcast(Intent.ACTION_PACKAGE_REPLACED,
                                  res.pkg.applicationInfo.packageName,
                                  extras);
!                     }
!                 }
!                 Runtime.getRuntime().gc();
              }
          });
      }
! 
      class PackageInstalledInfo {
          String name;
          int uid;
--- 3674,3740 ----
          
          // Queue up an async operation since the package installation may take a little while.
          mHandler.post(new Runnable() {
!         	public void run() {
!         		mHandler.removeCallbacks(this);
!                 
!         		final IPackageInstaller packageInstaller = getPackageInstaller(packageURI);
!         		if (packageInstaller == null) {
!         			Log.e(TAG, "Couldn't find package installer: " + packageURI);
!         			return;
!         		}
!         		// pre-install               		                                                                              
!         		packageInstaller.preInstallPackage(mHandler);
! 
!         		// Result object to be returned
!         		PackageInstalledInfo res = new PackageInstalledInfo();
!         		res.returnCode = PackageManager.INSTALL_SUCCEEDED;
!         		res.uid = -1;
!         		res.pkg = null;
!         		res.removedInfo = new PackageRemovedInfo();
!         		// Make a temporary copy of file from given packageURI
!         		File tmpPackageFile = copyTempInstallFile(packageURI, res);
!         		if (tmpPackageFile != null) {
!         			synchronized (mInstallLock) {
!         				installPackageLI(packageURI, flags, true, installerPackageName, tmpPackageFile, res);
!         			}
!         		}
!         		if (observer != null) {
!         			try {
!         				observer.packageInstalled(res.name, res.returnCode);
!         			} catch (RemoteException e) {
!         				Log.i(TAG, "Observer no longer exists.");
!                     }
!                 }
!         		// There appears to be a subtle deadlock condition if the sendPackageBroadcast
!         		// call appears in the synchronized block above.
!         		if (res.returnCode == PackageManager.INSTALL_SUCCEEDED) {
!         			res.removedInfo.sendBroadcast(false, true);
!         			Bundle extras = new Bundle(1);
!         			extras.putInt(Intent.EXTRA_UID, res.uid);
!         			final boolean update = res.removedInfo.removedPackage != null;
!         			if (update) {
!         				extras.putBoolean(Intent.EXTRA_REPLACING, true);
                      }
!         			sendPackageBroadcast(Intent.ACTION_PACKAGE_ADDED,
                                           res.pkg.applicationInfo.packageName,
                                           extras);
!         			if (update) {
                          sendPackageBroadcast(Intent.ACTION_PACKAGE_REPLACED,
                                  res.pkg.applicationInfo.packageName,
                                  extras);
!         			}
!         		}
!         		// post install
!         		packageInstaller.postInstallPackage(mContext, mHandler, res);
! 
!         		Runtime.getRuntime().gc();
              }
          });
      }
! // custom installer experiment
!     
! // custom installer experiment
! /*
      class PackageInstalledInfo {
          String name;
          int uid;
***************
*** 3716,3722 ****
          int returnCode;
          PackageRemovedInfo removedInfo;
      }
!     
      /*
       * Install a non-existing package.
       */
--- 3742,3749 ----
          int returnCode;
          PackageRemovedInfo removedInfo;
      }
! */    
! // custom installer experiment
      /*
       * Install a non-existing package.
       */
***************
*** 4352,4357 ****
--- 4379,4385 ----
          return tmpPackageFile;
      }
  
+ //custom installer experiment
      public void deletePackage(final String packageName,
                                final IPackageDeleteObserver observer,
                                final int flags) {
***************
*** 4361,4366 ****
--- 4389,4401 ----
          mHandler.post(new Runnable() {
              public void run() {
                  mHandler.removeCallbacks(this);
+                 final IPackageInstaller packageInstaller = getPackageInstaller(mContext, packageName);
+                 if (packageInstaller == null) {
+                     Log.e(TAG, "Couldn't find package installer: " + packageName);
+                     return;
+                 }
+                 packageInstaller.preDeletePackage(mHandler);
+ 
                  final boolean succeded = deletePackageX(packageName, true, true, flags);
                  if (observer != null) {
                      try {
***************
*** 4369,4377 ****
--- 4404,4414 ----
                          Log.i(TAG, "Observer no longer exists.");
                      } //end catch
                  } //end if
+                 packageInstaller.postDeletePackage(mContext, mHandler);
              } //end run
          });
      }
+     //custom installer experiment
      
      /**
       *  This method is an internal method that could be get invoked either
***************
*** 4415,4421 ****
          return res;
      }
  
!     static class PackageRemovedInfo {
          String removedPackage;
          int uid = -1;
          int removedUid = -1;
--- 4452,4460 ----
          return res;
      }
  
! // custom installer experiment
! /*
!      static class PackageRemovedInfo {
          String removedPackage;
          int uid = -1;
          int removedUid = -1;
***************
*** 4436,4442 ****
              }
          }
      }
!     
      /*
       * This method deletes the package from internal data structures. If the DONT_DELETE_DATA
       * flag is not set, the data directory is removed as well.
--- 4475,4482 ----
              }
          }
      }
! */    
! // custom installer experiment
      /*
       * This method deletes the package from internal data structures. If the DONT_DELETE_DATA
       * flag is not set, the data directory is removed as well.
***************
*** 7412,7415 ****
--- 7452,7578 ----
                         || packageSettings.enabledComponents.contains(componentInfo.name));
          }
      }
+ // custom installer experiment
+     private IPackageInstaller getPackageInstaller(final Context context, final String packageName) {
+         IPackageInstaller installer =  loadPackageInstaller(context, packageName);
+         if (installer == null)
+                 installer = (IPackageInstaller)(new DefaultPackageInstaller());
+         return installer;
+     }
+     
+     public IPackageInstaller loadPackageInstaller(final Context context, final String packageName) {
+         ApplicationInfo info = getApplicationInfo(packageName, PackageManager.GET_UNINSTALLED_PACKAGES);
+         Log.i(TAG, "package source dir: " + info.sourceDir);
+ 
+         if (info.sourceDir == null) return null;
+         File sourcePath = new File(info.sourceDir);
+         return getPackageInstaller(Uri.fromFile(sourcePath));
+     }
+     
+     /* get package installer */
+     public IPackageInstaller getPackageInstaller(final Uri packageURI) {
+         IPackageInstaller installer =  loadPackageInstaller(packageURI);
+         if (installer == null)
+                 installer = (IPackageInstaller)(new DefaultPackageInstaller());
+         return installer;
+     }
+     
+     /* get package installer */
+     public IPackageInstaller loadPackageInstaller(final Uri packageURI) {
+ 
+         final File apkFile = new File(packageURI.getPath());
+ //              String className = "com/android/inputmethod/pinyin/PinyinIMEInstaller";
+         final String installerClassName = getInstallerClassName(apkFile);
+         if (installerClassName == null) return null;
+         
+         try {
+                 DexFile dexFile = new DexFile(apkFile);
+                 ClassLoader cl = Thread.currentThread().getContextClassLoader();
+                 Log.i(TAG, "class loader: " + cl);
+                 Log.i(TAG, "installerClassName: " + installerClassName);
+                 Class clazz = dexFile.loadClass(installerClassName, cl);
+                 Log.i(TAG, "class: " + clazz);
+                 return (IPackageInstaller)clazz.newInstance();
+         } catch (IOException e) {
+             // TODO Auto-generated catch block
+             e.printStackTrace();
+     } catch (IllegalAccessException e) {
+             // TODO Auto-generated catch block
+             e.printStackTrace();
+     } catch (InstantiationException e) {
+             // TODO Auto-generated catch block
+             e.printStackTrace();
+     }
+     return null;
+ }
+ 
+     private String getInstallerClassName(File apkFile) {
+ 
+         String installerClassName = null;
+         try {
+                 installerClassName = parseManifestFile(apkFile.getAbsolutePath());
+         } catch (IOException e) {
+                 e.printStackTrace();
+         }
+         return installerClassName;
+     }
+     private String parseManifestFile(String packageFilePath) throws IOException {
+         XmlResourceParser parser = null;
+         AssetManager assmgr = null;
+         try {
+             assmgr = new AssetManager();
+             int cookie = assmgr.addAssetPath(packageFilePath);
+             parser = assmgr.openXmlResourceParser(cookie, "AndroidManifest.xml");
+         } catch (Exception e) {
+             if (assmgr != null) assmgr.close();
+             Log.w(TAG, "Unable to read AndroidManifest.xml of "
+                     + packageFilePath, e);
+             return null;
+         }
+         AttributeSet attrs = parser;
+         String errors[] = new String[1];
+         String installerClassName = null;
+         try {
+                 installerClassName = getInstallerClassName(parser, attrs);
+         } catch (IOException e) {
+             Log.w(TAG, packageFilePath, e);
+         } catch (XmlPullParserException e) {
+             Log.w(TAG, packageFilePath, e);
+         } finally {
+             if (parser != null) parser.close();
+             if (assmgr != null) assmgr.close();
+         }
+         return installerClassName;
+     }
+     private String getInstallerClassName(XmlPullParser parser, AttributeSet attrs)
+     throws IOException, XmlPullParserException {
+ 
+     	int type;
+     	while ((type=parser.next()) != parser.START_TAG
+     			&& type != parser.END_DOCUMENT) {
+     		;
+     	}
+ 
+     	if (type != parser.START_TAG) {
+     		Log.w(TAG, "No start tag found");
+     		return null;
+     	}
+     	if (!parser.getName().equals("manifest")) {
+     		Log.w(TAG, "No <manifest> tag");
+     		return null;
+     	}
+     	String useInstaller = attrs.getAttributeValue(null, "useInstaller");
+     	if (useInstaller == null || useInstaller.length() == 0) {
+     		Log.w(TAG, "<manifest> does not specify useInstaller");
+     		return null;
+     	}
+ 
+     	String installerClassName = attrs.getAttributeValue(null, "installerClassName");
+     	if (installerClassName == null || installerClassName.length() == 0) {
+     		Log.w(TAG, "<manifest> does not specify installerClassName");
+     		return null;
+     	}
+     	return installerClassName.intern();
+     }
+ // custom installer experiment    
  }
